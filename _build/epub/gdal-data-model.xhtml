<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>GDAL数据模型</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="gdal">
<span id="gdaldatamodel"></span><h1>GDAL数据模型</h1>
<p>本章主要介绍GDAL的数据模型，通过上一章，我们大致了解数据集和波段的意义，这章中，我们来看GDAL中这些概念的实现。本章基本参考 <a class="reference external" href="http://www.gdal.org/gdal_datamodel.html">GDAL_Datamodel</a><span class="link-target"> [http://www.gdal.org/gdal_datamodel.html]</span> 为了方便理解，没有完全按照原文翻译，有部分删改。</p>
<div class="section" id="dataset">
<span id="id1"></span><h2>数据集</h2>
<p>上章介绍了，简单的说，一个数据集可以看作为一幅影像。它包括了元数据、投影信息、波段等等，GDAL中用 <code class="docutils literal"><span class="pre">GDALDataset</span></code> 类来表示数据集。数据集除了内部的波段，还包括以下内容：</p>
<div class="section" id="coordinatesystem">
<span id="id2"></span><h3>投影系统</h3>
<p>GDAL中，使用的是 <a class="reference external" href="http://www.geoapi.org/3.0/javadoc/org/opengis/referencing/doc-files/WKT.html">WKT</a><span class="link-target"> [http://www.geoapi.org/3.0/javadoc/org/opengis/referencing/doc-files/WKT.html]</span> 串来表示投影，具体的表示内容可以参考链接，下面用例子简单的介绍一下，#后面表示注释:</p>
<div class="highlight-rst"><div class="highlight"><pre><span></span>PROJCS[&quot;WGS 84 / UTM zone 52N&quot;,                   #投影名称
    GEOGCS[&quot;WGS 84&quot;,                              #地理坐标系统名
        DATUM[&quot;WGS_1984&quot;,                         #水平基准面
            SPHEROID[&quot;WGS 84&quot;,6378137,298.257223  #椭球体名称、长半轴、反偏率
                AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],        #外部权威的空间参考系统的编码
            AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],
        PRIMEM[&quot;Greenwich&quot;,0],                    #中央经线Greenwich，0度标准子午线
        UNIT[&quot;degree&quot;,0.0174532925199433],        #指定测量使用的单位。在地理坐标系下使用角度。
        AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]],
    PROJECTION[&quot;Transverse_Mercator&quot;],            #投影方法，这里是通用墨卡托投影
    PARAMETER[&quot;latitude_of_origin&quot;,0],            #PARAMETER表示投影参数,0表示纬度起点为0度
    PARAMETER[&quot;central_meridian&quot;,129],            #投影带的中央经线是东经129度
    PARAMETER[&quot;scale_factor&quot;,0.9996],             #中央经线的长度比是0.9996
    PARAMETER[&quot;false_easting&quot;,500000],            #坐标纵轴向西移动500km
    PARAMETER[&quot;false_northing&quot;,0],                #横轴没有平移
    UNIT[&quot;metre&quot;,1,                               #指定测量使用的单位，指定米为测量单位。
        AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]],                #外部权威的空间参考系统的编码
    AUTHORITY[&quot;EPSG&quot;,&quot;32652&quot;]]
</pre></div>
</div>
<p>这部分和地图投影关系很大，如果没有基础，请参考 <a class="reference external" href="http://blog.sina.com.cn/s/blog_7f6303470101fzcw.html">地图投影系列介绍</a><span class="link-target"> [http://blog.sina.com.cn/s/blog_7f6303470101fzcw.html]</span> 和 <a class="reference external" href="http://www.cnblogs.com/yiyezhai/p/3182955.html">地图投影简明笔记</a><span class="link-target"> [http://www.cnblogs.com/yiyezhai/p/3182955.html]</span> 。</p>
<p>使用 <a class="reference external" href="http://www.gdal.org/classGDALDataset.html#aa42537e1062ce254d124b29ff3ebe857">GDALDataset::GetProjectionRef()</a><span class="link-target"> [http://www.gdal.org/classGDALDataset.html#aa42537e1062ce254d124b29ff3ebe857]</span> 函数可以获取数据集的投影信息，GDAL中使用仿射变换可以将地理坐标和图像坐标进行转换，在下一节中我们将具体展示；使用 <a class="reference external" href="http://www.gdal.org/classGDALDataset.html#a35ea63c2f9ea12afd190ca2446d02ddb">GDALDataset::GetGCPProjection()</a><span class="link-target"> [http://www.gdal.org/classGDALDataset.html#a35ea63c2f9ea12afd190ca2446d02ddb]</span> 可以获取GCP点的投影。返回均为WKT字符串，如果返回”“，则表示该数据集没有投影或者投影没有被识别。</p>
</div>
<div class="section" id="affinegeotransform">
<span id="id5"></span><h3>仿射地理变换</h3>
<p>GDAL数据集有两种方式表示栅格数据中像元位置（图像中某个点在影像中的行列号）和投影坐标系（不是经纬度，是投影到二维平面的地图坐标，二者可以通过地图投影进行相互转换）间的关系：仿射变换和GCP点。大部分数据都是用仿射变换描述的，本节中描述仿射变换。</p>
<p>仿射变换由六个参数实现， <code class="docutils literal"><span class="pre">GDALDataset::GetGeoTransform()</span></code> 可以获取仿射变换参数数组。将像元位置转换为投影坐标的公式如下：</p>
<div class="highlight-c++"><div class="highlight"><pre><span></span><span class="cm">/*</span>
<span class="cm">六个参数分别是：</span>
<span class="cm">    geos[0]  top left x 左上角x坐标</span>
<span class="cm">    geos[1]  w-e pixel resolution 东西方向像素分辨率</span>
<span class="cm">    geos[2]  rotation, 0 if image is &quot;north up&quot; 旋转角度，正北向上时为0</span>
<span class="cm">    geos[3]  top left y 左上角y坐标</span>
<span class="cm">    geos[4]  rotation, 0 if image is &quot;north up&quot; 旋转角度，正北向上时为0</span>
<span class="cm">    geos[5]  n-s pixel resolution 南北向像素分辨率</span>
<span class="cm">    x/y为图像的x/y坐标，geox/geoy为对应的投影坐标</span>
<span class="cm">*/</span>
<span class="n">geox</span> <span class="o">=</span> <span class="n">geos</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">geos</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">geos</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">y</span><span class="p">;</span>
<span class="n">geoy</span> <span class="o">=</span> <span class="n">geos</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">geos</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">geos</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">*</span> <span class="n">y</span>
</pre></div>
</div>
<p>注意，上面所说的点/线坐标系是从左上角(0,0)点到右下角，也就是坐标轴从左到右增长，从上到下增长的坐标系（即影象的行列从左下角开始计算）。 点/线位置中心是(0.5,0.5)</p>
</div>
<div class="section" id="gcp">
<span id="gcps"></span><h3>GCP点</h3>
<p>数据集可以由一系列控制点来定义空间参考坐标系。所有的GCP点共用 <code class="docutils literal"><span class="pre">GDALDataset::GetGCPProjection()</span></code> 获取的地理参考坐标系。GCP结构体在GDAL中表示如下：</p>
<div class="highlight-c++"><div class="highlight"><pre><span></span><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
    <span class="kt">char</span>    <span class="o">*</span><span class="n">pszId</span><span class="p">;</span>        <span class="c1">//ID，可以用字母+数字表示，不能重复</span>
    <span class="kt">char</span>    <span class="o">*</span><span class="n">pszInfo</span><span class="p">;</span>      <span class="c1">//描述信息,一般为空</span>
    <span class="kt">double</span>     <span class="n">dfGCPPixel</span><span class="p">;</span>    <span class="c1">//列号</span>
    <span class="kt">double</span>    <span class="n">dfGCPLine</span><span class="p">;</span>     <span class="c1">//行号</span>
    <span class="kt">double</span>    <span class="n">dfGCPX</span><span class="p">;</span>        <span class="c1">//投影x坐标</span>
    <span class="kt">double</span>    <span class="n">dfGCPY</span><span class="p">;</span>        <span class="c1">//投影y坐标</span>
    <span class="kt">double</span>    <span class="n">dfGCPZ</span><span class="p">;</span>        <span class="c1">//投影z坐标</span>
<span class="p">}</span> <span class="n">GDAL_GCP</span><span class="p">;</span>
</pre></div>
</div>
<p><strong>GDAL数据模型没有实现由GCPs产生坐标系的变化的机制</strong> ，而是把具体的操作留给用户实现,一般采用多项式插值实现。</p>
<p>如果数据集有投影的话，会包含仿射变换或GCPS。两者都有的很少见， 如果两者都有，则无法用权威坐标系定义。</p>
</div>
<div class="section" id="metadata">
<span id="id6"></span><h3>元数据</h3>
<p>GDAL中，元数据是以键值对呈现的辅助数据，可以使用 <a class="reference internal" href="gdal-utilities.xhtml#gdalinfo"><span class="std std-ref">gdalinfo文件信息工具</span></a> 获取影像元数据，结果如图所示：</p>
<div class="figure align-center">
<img alt="key-value Image" src="_images/keyvalue.png" />
</div>
<p>如上图中红色部分所示，在 <code class="docutils literal"><span class="pre">MetaData</span></code> 栏中，所有的数据都是以 <strong>key=value</strong> 的方式组织的。 <code class="docutils literal"><span class="pre">key</span></code> 中不能设置空格和一些特殊字符， <code class="docutils literal"><span class="pre">value</span></code> 为非空值的任意长度的内容。一个数据集的元数据一般不超过100kb，否则会导致性能严重下降。</p>
<p>一些数据格式支持用户自定义的基本元数据，一些数据格式会定义特殊的键。</p>
<p>相似的元数据可以组成一个域，如上面的红色部分和绿色部分，就属于不同的域。默认域没有名称，有些特殊用途的元数据有特殊的域。目前虽然不能列举出一个对象所需要 的所有域，但是程序可以测试任何我们已经知道确切含义的域。</p>
<p>下面介绍些常见的域。</p>
<div class="section" id="subdatasetsdomain">
<span id="id7"></span><h4>子数据集域</h4>
<p><a class="reference internal" href="formats.xhtml#multidatasets"><span class="std std-ref">多数据集数据</span></a> 中一般都会有这个域，用于存储子数据集的信息,一般是一个类似下面的信息列表:</p>
<div class="highlight-rst"><div class="highlight"><pre><span></span>Subdatasets:
    SUBDATASET_1_NAME=NETCDF:&quot;example.nc&quot;:auditTrail
    SUBDATASET_1_DESC=[2x80] auditTrail (8-bit character)
    SUBDATASET_2_NAME=NETCDF:&quot;example.nc&quot;:data
    SUBDATASET_2_DESC=[1x61x172] data (32-bit floating-point)
    SUBDATASET_3_NAME=NETCDF:&quot;example.nc&quot;:lat
    SUBDATASET_3_DESC=[61x172] lat (32-bit floating-point)
    SUBDATASET_4_NAME=NETCDF:&quot;example.nc&quot;:lon
    SUBDATASET_4_DESC=[61x172] lon (32-bit floating-point)
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">NAME=</span></code> 后面的内容是子数据集名称，用来打开数据集下的子数据集。<code class="docutils literal"><span class="pre">DESC=</span></code> 后面跟的是描述。ADRG, ECRGTOC, GEORASTER, GTiff, HDF4, HDF5, netCDF, NITF, NTv2, OGDI, PDF, PostGISRaster, Rasterlite, RPFTOC, RS2, WCS, and WMS这些数据类型都有子数据集。</p>
</div>
<div class="section" id="imagestructuredomain">
<span id="id8"></span><h4>图像结构域</h4>
<p>与影像格式相关的元数据信息将存在这个域中，就是上图中绿色部分。这部分元数据在转换格式的时候，一般不会自动拷贝到新数据中。其中有一些典型的条目，例如 <code class="docutils literal"><span class="pre">COMPRESSION</span></code> 表示压缩程度等。</p>
</div>
<div class="section" id="rpc">
<span id="rpcdomain"></span><h4>RPC域</h4>
<p>RPC元数据域描述有理多项式系数几何模型，这也是描述像元和地理参考位置之间变换信息用的。更详细的信息参见 <a class="reference external" href="http://geotiff.maptools.org/rpc_prop.html">RPCs in GeoTIFF</a><span class="link-target"> [http://geotiff.maptools.org/rpc_prop.html]</span> 文档。</p>
</div>
<div class="section" id="xml">
<span id="xmldomains"></span><h4>xml: 域</h4>
<p>任何以 <code class="docutils literal"><span class="pre">xml:</span></code> 为前缀名的域都不是一个普通的键值对方式的元数据。它是一个存有xml字符串的单XML文档。</p>
</div>
</div>
</div>
<div class="section" id="rasterband">
<span id="id9"></span><h2>波段</h2>
<p>波段是真正存储数据的结构，GDAL中用 <code class="docutils literal"><span class="pre">GDALRasterBand</span></code> 类来表示单个波段。</p>
<p>波段有以下的性质：</p>
<ul class="simple">
<li><p>宽和高：如果是全分辨率的波段，那长和宽与数据集中的定义是一样的。</p></li>
<li><p>数据类型：有Byte, UInt16, Int16, UInt32, Int32, Float32, Float64, and the complex types CInt16, CInt32, CFloat32, and CFloat64类型.</p></li>
<li><p>块大小：缓冲块的大小，tiff中一般是以行作为缓冲块</p></li>
<li><p>描述字串：可选</p></li>
<li><p>nodata数值：可选</p></li>
<li><p>光栅名称：可选，这个特性可以用来指定一些比较重要的数据。</p></li>
<li><dl class="simple">
<dt>波段的解释信息，枚举型：</dt>
<dd><ul>
<li><p>GCI_Undefined: 默认值.</p></li>
<li><p>GCI_GrayIndex: 灰度值波段</p></li>
<li><p>GCI_PaletteIndex: 颜色表索引</p></li>
<li><p>GCI_RedBand: 红色波段</p></li>
<li><p>GCI_GreenBand: 绿色波段</p></li>
<li><p>GCI_BlueBand: 蓝色波段</p></li>
<li><p>GCI_AlphaBand: 透明通道</p></li>
<li><p>GCI_HueBand: 色调</p></li>
<li><p>GCI_SaturationBand: 饱和度</p></li>
<li><p>GCI_LightnessBand: 光强</p></li>
<li><p>GCI_CyanBand: 青色波段</p></li>
<li><p>GCI_MagentaBand: 品红波段</p></li>
<li><p>GCI_YellowBand: 黄色波段</p></li>
<li><p>GCI_BlackBand: t黑色波段.</p></li>
</ul>
</dd>
</dl>
</li>
</ul>
</div>
<div class="section" id="colortable">
<span id="id10"></span><h2>颜色表</h2>
<p>颜色表在GDAL中，由多个 <code class="docutils literal"><span class="pre">GDALColorEntry</span></code> 组成， <code class="docutils literal"><span class="pre">GDALColorEntry</span></code> 结构体描述如下：</p>
<div class="highlight-c++"><div class="highlight"><pre><span></span><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
    <span class="o">/-</span> <span class="n">gray</span><span class="p">,</span> <span class="n">red</span><span class="p">,</span> <span class="n">cyan</span> <span class="n">or</span> <span class="n">hue</span> <span class="o">-/</span>
    <span class="kt">short</span>      <span class="n">c1</span><span class="p">;</span>
    <span class="o">/-</span> <span class="n">green</span><span class="p">,</span> <span class="n">magenta</span><span class="p">,</span> <span class="n">or</span> <span class="n">lightness</span> <span class="o">-/</span>
    <span class="kt">short</span>      <span class="n">c2</span><span class="p">;</span>
    <span class="o">/-</span> <span class="n">blue</span><span class="p">,</span> <span class="n">yellow</span><span class="p">,</span> <span class="n">or</span> <span class="n">saturation</span> <span class="o">-/</span>
    <span class="kt">short</span>      <span class="n">c3</span><span class="p">;</span>
    <span class="o">/-</span> <span class="n">alpha</span> <span class="n">or</span> <span class="n">blackband</span> <span class="o">-/</span>
    <span class="kt">short</span>      <span class="n">c4</span><span class="p">;</span>
<span class="p">}</span> <span class="n">GDALColorEntry</span><span class="p">;</span>
</pre></div>
</div>
<p>颜色表同时还对应一个调色板（ <code class="docutils literal"><span class="pre">GDALPaletteInterp</span></code> ）， <code class="docutils literal"><span class="pre">GDALColorEntry</span></code> 中的 <code class="docutils literal"><span class="pre">c1/c2/c3/c4</span></code> 的 值可以作为调色板索引得到真正的颜色值。</p>
<ul class="simple">
<li><p>GPI_Gray: c1作为灰度值。</p></li>
<li><p>GPI_RGB: c1/c2/c3依次为Red/Green/Blue，c4对应alpha通道。</p></li>
<li><p>GPI_CMYK: c1为cyan，c2为magenta，c3为yellow，c4为black。</p></li>
<li><p>GPI_HLS: c1为hue，c2为lightness，c3为saturation。</p></li>
</ul>
<p>用颜色表表示时，每个像素保存的只是像素颜色在颜色表的位置。每个颜色的索引从 0开始递增。这里并没有提供针对颜色表的缩放机制。</p>
</div>
<div class="section" id="overviews">
<span id="id11"></span><h2>金字塔层</h2>
<p>一个波段可以有零个或多个金字塔层，这个结构在构建影像金字塔的时候将用到。每个层都相当于独立的 <code class="docutils literal"><span class="pre">GDALRasterBand</span></code>  。每层的行列数和原始的波段有所不同，但是覆盖的地理区域是相同的。</p>
<p>金字塔层是原始波段的降采样实现的，一般用于快速显示。</p>
<p>波段有 <code class="docutils literal"><span class="pre">HasArbitraryOverviews</span></code> 属性来判定在某些分辨率上是否有金字塔层。该属性可以应用于fft编码或者是网络传输切片等状况中。</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>